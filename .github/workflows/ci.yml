name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Server Tests and Linting
  server-test:
    name: Server Tests & Linting
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install server dependencies
      run: npm ci

    - name: Run server linting
      run: npm run lint

    - name: Run server tests
      run: npm test
      env:
        NODE_ENV: test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: server
        name: server-coverage

  # Client Build and Linting
  client-test:
    name: Client Build & Linting
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Install client dependencies
      working-directory: ./client
      run: npm ci

    - name: Run client linting
      working-directory: ./client
      run: npm run lint

    - name: Build client
      working-directory: ./client
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: client-build-${{ matrix.node-version }}
        path: client/dist/

  # Docker Build Test
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [server-test, client-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build server Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: quotes-server:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build client Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        file: ./client/Dockerfile
        push: false
        tags: quotes-client:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test docker-compose
      run: |
        echo "GEMINI_API_KEY=test-key" > .env
        docker-compose -f docker-compose.yml config
      env:
        COMPOSE_DOCKER_CLI_BUILD: 1
        DOCKER_BUILDKIT: 1

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [server-test, client-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install server dependencies
      run: npm ci

    - name: Run security audit (server)
      run: npm audit --audit-level high

    - name: Install client dependencies
      working-directory: ./client
      run: npm ci

    - name: Run security audit (client)
      working-directory: ./client
      run: npm audit --audit-level high

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services with docker-compose
      run: |
        echo "GEMINI_API_KEY=test-key" > .env
        docker-compose up -d --build
      env:
        COMPOSE_DOCKER_CLI_BUILD: 1
        DOCKER_BUILDKIT: 1

    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 2; done'

    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:3000/health
        
        # Test quotes endpoints
        curl -f http://localhost:3000/api/v1/quote
        curl -f http://localhost:3000/api/v1/quotes
        
        # Test chat endpoint
        curl -f -X POST http://localhost:3000/api/v1/chat \
          -H "Content-Type: application/json" \
          -d '{"message": "Hello", "language": "en"}'

    - name: Test frontend
      run: |
        # Test frontend loads
        curl -f http://localhost:8080/
        
        # Test static assets
        curl -f http://localhost:8080/quote.svg

    - name: Stop services
      run: docker-compose down

    - name: Collect logs
      if: failure()
      run: |
        docker-compose logs api
        docker-compose logs web

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy notification
      run: |
        echo "ðŸš€ Deployment would happen here"
        echo "âœ… All checks passed!"
        echo "ðŸ“¦ Ready for production deployment"