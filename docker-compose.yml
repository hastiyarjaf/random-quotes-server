version: '3.8'

services:
  # API Server
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: quotes-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - ALLOWED_ORIGIN=http://localhost:8080
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX=100
      - CHAT_RATE_LIMIT_WINDOW_MS=300000
      - CHAT_RATE_LIMIT_MAX=20
      - AI_PROVIDER=gemini
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - GEMINI_MODEL=${GEMINI_MODEL:-gemini-1.5-flash}
    volumes:
      - ./quotes.json:/app/quotes.json:ro
    networks:
      - quotes-network
    healthcheck:
      test: ["CMD", "node", "-e", "const http=require('http');const options={host:'localhost',port:3000,path:'/health',timeout:2000};const req=http.request(options,(res)=>{process.exit(res.statusCode===200?0:1)});req.on('error',()=>process.exit(1));req.end();"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Web Client
  web:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: quotes-web
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - quotes-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  quotes-network:
    driver: bridge

volumes:
  quotes_data:
    driver: local